---
import type { HTMLAttributes } from "astro/types";

type As = "button" | "a";
interface BaseProps {
  gap?: string | number;
  classes?: {
    root?: string;
    item?: string;
  };
  tag?: As;
}

interface LinkProps extends BaseProps, HTMLAttributes<"a"> {
  tag?: "a";
  href: string;
}

interface ButtonProps extends BaseProps, HTMLAttributes<"button"> {
  tag?: "button";
  href?: never;
}

type Props = LinkProps | ButtonProps;

const { tag: Tag = "a", gap, href, classes, ...others } = Astro.props;

const className = [
  "flex flex-row items-center menu-item__link hover:text-baseColor transition duration-300",
  {
    "p-2 rounded-[100%] hover:bg-highlighting": !Astro.slots.has("default"),
    "py-3": Astro.slots.has("default"),
  },
  classes?.item,
];
---

<li class:list={["text-menuItem", classes?.root]}>
  {
    Tag === "a" ? (
      <a href={href} class:list={className} {...others}>
        <slot name="icon" />
        {Astro.slots.has("default") && (
          <span class="font-bold menu-item__text">
            <slot />
          </span>
        )}
      </a>
    ) : (
      <button class:list={className} {...(others as HTMLAttributes<"button">)}>
        <slot name="icon" />
        {Astro.slots.has("default") && (
          <span class="font-bold menu-item__text">
            <slot />
          </span>
        )}
      </button>
    )
  }
</li>

<style define:vars={{ gap }}>
  .menu-item__text {
    margin-bottom: -2px;
  }

  .menu-item__link {
    gap: var(--gap, 1.25rem);
  }
</style>
